# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.

networks:
  custom_network:
    driver: bridge

services:
  by-zweroboy1:
    container_name: node-server
    build:
      context: .
    environment:
      NODE_ENV: production
    ports:
      - '$PORT:4000'
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:alpine3.18
    container_name: postgres-db
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
      - db-logs:/var/log/postgresql

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_WALDIR: /var/log/postgresql
    ports:
      - '5432:${POSTGRES_PORT}'
    networks:
      - custom_network
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', '${POSTGRES_USER}', '-d', '${POSTGRES_DB}']
      interval: 2s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  db-logs:
